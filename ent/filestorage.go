// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/filestorage"
)

// FileStorage is the model entity for the FileStorage schema.
type FileStorage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// BucketName holds the value of the "bucket_name" field.
	BucketName string `json:"bucket_name,omitempty"`
	// ObjectKey holds the value of the "object_key" field.
	ObjectKey string `json:"object_key,omitempty"`
	// OriginalFileName holds the value of the "original_file_name" field.
	OriginalFileName string `json:"original_file_name,omitempty"`
	// FileSize holds the value of the "file_size" field.
	FileSize int64 `json:"file_size,omitempty"`
	// ContentType holds the value of the "content_type" field.
	ContentType string `json:"content_type,omitempty"`
	// FileHash holds the value of the "file_hash" field.
	FileHash     string `json:"file_hash,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FileStorage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case filestorage.FieldID, filestorage.FieldFileSize:
			values[i] = new(sql.NullInt64)
		case filestorage.FieldBucketName, filestorage.FieldObjectKey, filestorage.FieldOriginalFileName, filestorage.FieldContentType, filestorage.FieldFileHash:
			values[i] = new(sql.NullString)
		case filestorage.FieldCreatedAt, filestorage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FileStorage fields.
func (fs *FileStorage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case filestorage.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fs.ID = int(value.Int64)
		case filestorage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				fs.CreatedAt = value.Time
			}
		case filestorage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				fs.UpdatedAt = value.Time
			}
		case filestorage.FieldBucketName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket_name", values[i])
			} else if value.Valid {
				fs.BucketName = value.String
			}
		case filestorage.FieldObjectKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field object_key", values[i])
			} else if value.Valid {
				fs.ObjectKey = value.String
			}
		case filestorage.FieldOriginalFileName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field original_file_name", values[i])
			} else if value.Valid {
				fs.OriginalFileName = value.String
			}
		case filestorage.FieldFileSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field file_size", values[i])
			} else if value.Valid {
				fs.FileSize = value.Int64
			}
		case filestorage.FieldContentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content_type", values[i])
			} else if value.Valid {
				fs.ContentType = value.String
			}
		case filestorage.FieldFileHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_hash", values[i])
			} else if value.Valid {
				fs.FileHash = value.String
			}
		default:
			fs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FileStorage.
// This includes values selected through modifiers, order, etc.
func (fs *FileStorage) Value(name string) (ent.Value, error) {
	return fs.selectValues.Get(name)
}

// Update returns a builder for updating this FileStorage.
// Note that you need to call FileStorage.Unwrap() before calling this method if this FileStorage
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FileStorage) Update() *FileStorageUpdateOne {
	return NewFileStorageClient(fs.config).UpdateOne(fs)
}

// Unwrap unwraps the FileStorage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FileStorage) Unwrap() *FileStorage {
	_tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FileStorage is not a transactional entity")
	}
	fs.config.driver = _tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FileStorage) String() string {
	var builder strings.Builder
	builder.WriteString("FileStorage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fs.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fs.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fs.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("bucket_name=")
	builder.WriteString(fs.BucketName)
	builder.WriteString(", ")
	builder.WriteString("object_key=")
	builder.WriteString(fs.ObjectKey)
	builder.WriteString(", ")
	builder.WriteString("original_file_name=")
	builder.WriteString(fs.OriginalFileName)
	builder.WriteString(", ")
	builder.WriteString("file_size=")
	builder.WriteString(fmt.Sprintf("%v", fs.FileSize))
	builder.WriteString(", ")
	builder.WriteString("content_type=")
	builder.WriteString(fs.ContentType)
	builder.WriteString(", ")
	builder.WriteString("file_hash=")
	builder.WriteString(fs.FileHash)
	builder.WriteByte(')')
	return builder.String()
}

// FileStorages is a parsable slice of FileStorage.
type FileStorages []*FileStorage
