// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/filestorage"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// FileStorageUpdate is the builder for updating FileStorage entities.
type FileStorageUpdate struct {
	config
	hooks    []Hook
	mutation *FileStorageMutation
}

// Where appends a list predicates to the FileStorageUpdate builder.
func (fsu *FileStorageUpdate) Where(ps ...predicate.FileStorage) *FileStorageUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// SetUpdatedAt sets the "updated_at" field.
func (fsu *FileStorageUpdate) SetUpdatedAt(t time.Time) *FileStorageUpdate {
	fsu.mutation.SetUpdatedAt(t)
	return fsu
}

// SetBucketName sets the "bucket_name" field.
func (fsu *FileStorageUpdate) SetBucketName(s string) *FileStorageUpdate {
	fsu.mutation.SetBucketName(s)
	return fsu
}

// SetNillableBucketName sets the "bucket_name" field if the given value is not nil.
func (fsu *FileStorageUpdate) SetNillableBucketName(s *string) *FileStorageUpdate {
	if s != nil {
		fsu.SetBucketName(*s)
	}
	return fsu
}

// SetObjectKey sets the "object_key" field.
func (fsu *FileStorageUpdate) SetObjectKey(s string) *FileStorageUpdate {
	fsu.mutation.SetObjectKey(s)
	return fsu
}

// SetNillableObjectKey sets the "object_key" field if the given value is not nil.
func (fsu *FileStorageUpdate) SetNillableObjectKey(s *string) *FileStorageUpdate {
	if s != nil {
		fsu.SetObjectKey(*s)
	}
	return fsu
}

// SetOriginalFileName sets the "original_file_name" field.
func (fsu *FileStorageUpdate) SetOriginalFileName(s string) *FileStorageUpdate {
	fsu.mutation.SetOriginalFileName(s)
	return fsu
}

// SetNillableOriginalFileName sets the "original_file_name" field if the given value is not nil.
func (fsu *FileStorageUpdate) SetNillableOriginalFileName(s *string) *FileStorageUpdate {
	if s != nil {
		fsu.SetOriginalFileName(*s)
	}
	return fsu
}

// ClearOriginalFileName clears the value of the "original_file_name" field.
func (fsu *FileStorageUpdate) ClearOriginalFileName() *FileStorageUpdate {
	fsu.mutation.ClearOriginalFileName()
	return fsu
}

// SetFileSize sets the "file_size" field.
func (fsu *FileStorageUpdate) SetFileSize(i int64) *FileStorageUpdate {
	fsu.mutation.ResetFileSize()
	fsu.mutation.SetFileSize(i)
	return fsu
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (fsu *FileStorageUpdate) SetNillableFileSize(i *int64) *FileStorageUpdate {
	if i != nil {
		fsu.SetFileSize(*i)
	}
	return fsu
}

// AddFileSize adds i to the "file_size" field.
func (fsu *FileStorageUpdate) AddFileSize(i int64) *FileStorageUpdate {
	fsu.mutation.AddFileSize(i)
	return fsu
}

// ClearFileSize clears the value of the "file_size" field.
func (fsu *FileStorageUpdate) ClearFileSize() *FileStorageUpdate {
	fsu.mutation.ClearFileSize()
	return fsu
}

// SetContentType sets the "content_type" field.
func (fsu *FileStorageUpdate) SetContentType(s string) *FileStorageUpdate {
	fsu.mutation.SetContentType(s)
	return fsu
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (fsu *FileStorageUpdate) SetNillableContentType(s *string) *FileStorageUpdate {
	if s != nil {
		fsu.SetContentType(*s)
	}
	return fsu
}

// ClearContentType clears the value of the "content_type" field.
func (fsu *FileStorageUpdate) ClearContentType() *FileStorageUpdate {
	fsu.mutation.ClearContentType()
	return fsu
}

// SetFileHash sets the "file_hash" field.
func (fsu *FileStorageUpdate) SetFileHash(s string) *FileStorageUpdate {
	fsu.mutation.SetFileHash(s)
	return fsu
}

// SetNillableFileHash sets the "file_hash" field if the given value is not nil.
func (fsu *FileStorageUpdate) SetNillableFileHash(s *string) *FileStorageUpdate {
	if s != nil {
		fsu.SetFileHash(*s)
	}
	return fsu
}

// ClearFileHash clears the value of the "file_hash" field.
func (fsu *FileStorageUpdate) ClearFileHash() *FileStorageUpdate {
	fsu.mutation.ClearFileHash()
	return fsu
}

// Mutation returns the FileStorageMutation object of the builder.
func (fsu *FileStorageUpdate) Mutation() *FileStorageMutation {
	return fsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FileStorageUpdate) Save(ctx context.Context) (int, error) {
	fsu.defaults()
	return withHooks(ctx, fsu.sqlSave, fsu.mutation, fsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FileStorageUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FileStorageUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FileStorageUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsu *FileStorageUpdate) defaults() {
	if _, ok := fsu.mutation.UpdatedAt(); !ok {
		v := filestorage.UpdateDefaultUpdatedAt()
		fsu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsu *FileStorageUpdate) check() error {
	if v, ok := fsu.mutation.BucketName(); ok {
		if err := filestorage.BucketNameValidator(v); err != nil {
			return &ValidationError{Name: "bucket_name", err: fmt.Errorf(`ent: validator failed for field "FileStorage.bucket_name": %w`, err)}
		}
	}
	if v, ok := fsu.mutation.ObjectKey(); ok {
		if err := filestorage.ObjectKeyValidator(v); err != nil {
			return &ValidationError{Name: "object_key", err: fmt.Errorf(`ent: validator failed for field "FileStorage.object_key": %w`, err)}
		}
	}
	return nil
}

func (fsu *FileStorageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(filestorage.Table, filestorage.Columns, sqlgraph.NewFieldSpec(filestorage.FieldID, field.TypeInt))
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsu.mutation.UpdatedAt(); ok {
		_spec.SetField(filestorage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fsu.mutation.BucketName(); ok {
		_spec.SetField(filestorage.FieldBucketName, field.TypeString, value)
	}
	if value, ok := fsu.mutation.ObjectKey(); ok {
		_spec.SetField(filestorage.FieldObjectKey, field.TypeString, value)
	}
	if value, ok := fsu.mutation.OriginalFileName(); ok {
		_spec.SetField(filestorage.FieldOriginalFileName, field.TypeString, value)
	}
	if fsu.mutation.OriginalFileNameCleared() {
		_spec.ClearField(filestorage.FieldOriginalFileName, field.TypeString)
	}
	if value, ok := fsu.mutation.FileSize(); ok {
		_spec.SetField(filestorage.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := fsu.mutation.AddedFileSize(); ok {
		_spec.AddField(filestorage.FieldFileSize, field.TypeInt64, value)
	}
	if fsu.mutation.FileSizeCleared() {
		_spec.ClearField(filestorage.FieldFileSize, field.TypeInt64)
	}
	if value, ok := fsu.mutation.ContentType(); ok {
		_spec.SetField(filestorage.FieldContentType, field.TypeString, value)
	}
	if fsu.mutation.ContentTypeCleared() {
		_spec.ClearField(filestorage.FieldContentType, field.TypeString)
	}
	if value, ok := fsu.mutation.FileHash(); ok {
		_spec.SetField(filestorage.FieldFileHash, field.TypeString, value)
	}
	if fsu.mutation.FileHashCleared() {
		_spec.ClearField(filestorage.FieldFileHash, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filestorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fsu.mutation.done = true
	return n, nil
}

// FileStorageUpdateOne is the builder for updating a single FileStorage entity.
type FileStorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FileStorageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fsuo *FileStorageUpdateOne) SetUpdatedAt(t time.Time) *FileStorageUpdateOne {
	fsuo.mutation.SetUpdatedAt(t)
	return fsuo
}

// SetBucketName sets the "bucket_name" field.
func (fsuo *FileStorageUpdateOne) SetBucketName(s string) *FileStorageUpdateOne {
	fsuo.mutation.SetBucketName(s)
	return fsuo
}

// SetNillableBucketName sets the "bucket_name" field if the given value is not nil.
func (fsuo *FileStorageUpdateOne) SetNillableBucketName(s *string) *FileStorageUpdateOne {
	if s != nil {
		fsuo.SetBucketName(*s)
	}
	return fsuo
}

// SetObjectKey sets the "object_key" field.
func (fsuo *FileStorageUpdateOne) SetObjectKey(s string) *FileStorageUpdateOne {
	fsuo.mutation.SetObjectKey(s)
	return fsuo
}

// SetNillableObjectKey sets the "object_key" field if the given value is not nil.
func (fsuo *FileStorageUpdateOne) SetNillableObjectKey(s *string) *FileStorageUpdateOne {
	if s != nil {
		fsuo.SetObjectKey(*s)
	}
	return fsuo
}

// SetOriginalFileName sets the "original_file_name" field.
func (fsuo *FileStorageUpdateOne) SetOriginalFileName(s string) *FileStorageUpdateOne {
	fsuo.mutation.SetOriginalFileName(s)
	return fsuo
}

// SetNillableOriginalFileName sets the "original_file_name" field if the given value is not nil.
func (fsuo *FileStorageUpdateOne) SetNillableOriginalFileName(s *string) *FileStorageUpdateOne {
	if s != nil {
		fsuo.SetOriginalFileName(*s)
	}
	return fsuo
}

// ClearOriginalFileName clears the value of the "original_file_name" field.
func (fsuo *FileStorageUpdateOne) ClearOriginalFileName() *FileStorageUpdateOne {
	fsuo.mutation.ClearOriginalFileName()
	return fsuo
}

// SetFileSize sets the "file_size" field.
func (fsuo *FileStorageUpdateOne) SetFileSize(i int64) *FileStorageUpdateOne {
	fsuo.mutation.ResetFileSize()
	fsuo.mutation.SetFileSize(i)
	return fsuo
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (fsuo *FileStorageUpdateOne) SetNillableFileSize(i *int64) *FileStorageUpdateOne {
	if i != nil {
		fsuo.SetFileSize(*i)
	}
	return fsuo
}

// AddFileSize adds i to the "file_size" field.
func (fsuo *FileStorageUpdateOne) AddFileSize(i int64) *FileStorageUpdateOne {
	fsuo.mutation.AddFileSize(i)
	return fsuo
}

// ClearFileSize clears the value of the "file_size" field.
func (fsuo *FileStorageUpdateOne) ClearFileSize() *FileStorageUpdateOne {
	fsuo.mutation.ClearFileSize()
	return fsuo
}

// SetContentType sets the "content_type" field.
func (fsuo *FileStorageUpdateOne) SetContentType(s string) *FileStorageUpdateOne {
	fsuo.mutation.SetContentType(s)
	return fsuo
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (fsuo *FileStorageUpdateOne) SetNillableContentType(s *string) *FileStorageUpdateOne {
	if s != nil {
		fsuo.SetContentType(*s)
	}
	return fsuo
}

// ClearContentType clears the value of the "content_type" field.
func (fsuo *FileStorageUpdateOne) ClearContentType() *FileStorageUpdateOne {
	fsuo.mutation.ClearContentType()
	return fsuo
}

// SetFileHash sets the "file_hash" field.
func (fsuo *FileStorageUpdateOne) SetFileHash(s string) *FileStorageUpdateOne {
	fsuo.mutation.SetFileHash(s)
	return fsuo
}

// SetNillableFileHash sets the "file_hash" field if the given value is not nil.
func (fsuo *FileStorageUpdateOne) SetNillableFileHash(s *string) *FileStorageUpdateOne {
	if s != nil {
		fsuo.SetFileHash(*s)
	}
	return fsuo
}

// ClearFileHash clears the value of the "file_hash" field.
func (fsuo *FileStorageUpdateOne) ClearFileHash() *FileStorageUpdateOne {
	fsuo.mutation.ClearFileHash()
	return fsuo
}

// Mutation returns the FileStorageMutation object of the builder.
func (fsuo *FileStorageUpdateOne) Mutation() *FileStorageMutation {
	return fsuo.mutation
}

// Where appends a list predicates to the FileStorageUpdate builder.
func (fsuo *FileStorageUpdateOne) Where(ps ...predicate.FileStorage) *FileStorageUpdateOne {
	fsuo.mutation.Where(ps...)
	return fsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FileStorageUpdateOne) Select(field string, fields ...string) *FileStorageUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FileStorage entity.
func (fsuo *FileStorageUpdateOne) Save(ctx context.Context) (*FileStorage, error) {
	fsuo.defaults()
	return withHooks(ctx, fsuo.sqlSave, fsuo.mutation, fsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FileStorageUpdateOne) SaveX(ctx context.Context) *FileStorage {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FileStorageUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FileStorageUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsuo *FileStorageUpdateOne) defaults() {
	if _, ok := fsuo.mutation.UpdatedAt(); !ok {
		v := filestorage.UpdateDefaultUpdatedAt()
		fsuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsuo *FileStorageUpdateOne) check() error {
	if v, ok := fsuo.mutation.BucketName(); ok {
		if err := filestorage.BucketNameValidator(v); err != nil {
			return &ValidationError{Name: "bucket_name", err: fmt.Errorf(`ent: validator failed for field "FileStorage.bucket_name": %w`, err)}
		}
	}
	if v, ok := fsuo.mutation.ObjectKey(); ok {
		if err := filestorage.ObjectKeyValidator(v); err != nil {
			return &ValidationError{Name: "object_key", err: fmt.Errorf(`ent: validator failed for field "FileStorage.object_key": %w`, err)}
		}
	}
	return nil
}

func (fsuo *FileStorageUpdateOne) sqlSave(ctx context.Context) (_node *FileStorage, err error) {
	if err := fsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(filestorage.Table, filestorage.Columns, sqlgraph.NewFieldSpec(filestorage.FieldID, field.TypeInt))
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FileStorage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, filestorage.FieldID)
		for _, f := range fields {
			if !filestorage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != filestorage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(filestorage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fsuo.mutation.BucketName(); ok {
		_spec.SetField(filestorage.FieldBucketName, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.ObjectKey(); ok {
		_spec.SetField(filestorage.FieldObjectKey, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.OriginalFileName(); ok {
		_spec.SetField(filestorage.FieldOriginalFileName, field.TypeString, value)
	}
	if fsuo.mutation.OriginalFileNameCleared() {
		_spec.ClearField(filestorage.FieldOriginalFileName, field.TypeString)
	}
	if value, ok := fsuo.mutation.FileSize(); ok {
		_spec.SetField(filestorage.FieldFileSize, field.TypeInt64, value)
	}
	if value, ok := fsuo.mutation.AddedFileSize(); ok {
		_spec.AddField(filestorage.FieldFileSize, field.TypeInt64, value)
	}
	if fsuo.mutation.FileSizeCleared() {
		_spec.ClearField(filestorage.FieldFileSize, field.TypeInt64)
	}
	if value, ok := fsuo.mutation.ContentType(); ok {
		_spec.SetField(filestorage.FieldContentType, field.TypeString, value)
	}
	if fsuo.mutation.ContentTypeCleared() {
		_spec.ClearField(filestorage.FieldContentType, field.TypeString)
	}
	if value, ok := fsuo.mutation.FileHash(); ok {
		_spec.SetField(filestorage.FieldFileHash, field.TypeString, value)
	}
	if fsuo.mutation.FileHashCleared() {
		_spec.ClearField(filestorage.FieldFileHash, field.TypeString)
	}
	_node = &FileStorage{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{filestorage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fsuo.mutation.done = true
	return _node, nil
}
