// Code generated by ent, DO NOT EDIT.

package filestorage

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/mikestefanello/pagoda/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldUpdatedAt, v))
}

// BucketName applies equality check predicate on the "bucket_name" field. It's identical to BucketNameEQ.
func BucketName(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldBucketName, v))
}

// ObjectKey applies equality check predicate on the "object_key" field. It's identical to ObjectKeyEQ.
func ObjectKey(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldObjectKey, v))
}

// OriginalFileName applies equality check predicate on the "original_file_name" field. It's identical to OriginalFileNameEQ.
func OriginalFileName(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldOriginalFileName, v))
}

// FileSize applies equality check predicate on the "file_size" field. It's identical to FileSizeEQ.
func FileSize(v int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldFileSize, v))
}

// ContentType applies equality check predicate on the "content_type" field. It's identical to ContentTypeEQ.
func ContentType(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldContentType, v))
}

// FileHash applies equality check predicate on the "file_hash" field. It's identical to FileHashEQ.
func FileHash(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldFileHash, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldUpdatedAt, v))
}

// BucketNameEQ applies the EQ predicate on the "bucket_name" field.
func BucketNameEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldBucketName, v))
}

// BucketNameNEQ applies the NEQ predicate on the "bucket_name" field.
func BucketNameNEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldBucketName, v))
}

// BucketNameIn applies the In predicate on the "bucket_name" field.
func BucketNameIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldBucketName, vs...))
}

// BucketNameNotIn applies the NotIn predicate on the "bucket_name" field.
func BucketNameNotIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldBucketName, vs...))
}

// BucketNameGT applies the GT predicate on the "bucket_name" field.
func BucketNameGT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldBucketName, v))
}

// BucketNameGTE applies the GTE predicate on the "bucket_name" field.
func BucketNameGTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldBucketName, v))
}

// BucketNameLT applies the LT predicate on the "bucket_name" field.
func BucketNameLT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldBucketName, v))
}

// BucketNameLTE applies the LTE predicate on the "bucket_name" field.
func BucketNameLTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldBucketName, v))
}

// BucketNameContains applies the Contains predicate on the "bucket_name" field.
func BucketNameContains(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContains(FieldBucketName, v))
}

// BucketNameHasPrefix applies the HasPrefix predicate on the "bucket_name" field.
func BucketNameHasPrefix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasPrefix(FieldBucketName, v))
}

// BucketNameHasSuffix applies the HasSuffix predicate on the "bucket_name" field.
func BucketNameHasSuffix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasSuffix(FieldBucketName, v))
}

// BucketNameEqualFold applies the EqualFold predicate on the "bucket_name" field.
func BucketNameEqualFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEqualFold(FieldBucketName, v))
}

// BucketNameContainsFold applies the ContainsFold predicate on the "bucket_name" field.
func BucketNameContainsFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContainsFold(FieldBucketName, v))
}

// ObjectKeyEQ applies the EQ predicate on the "object_key" field.
func ObjectKeyEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldObjectKey, v))
}

// ObjectKeyNEQ applies the NEQ predicate on the "object_key" field.
func ObjectKeyNEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldObjectKey, v))
}

// ObjectKeyIn applies the In predicate on the "object_key" field.
func ObjectKeyIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldObjectKey, vs...))
}

// ObjectKeyNotIn applies the NotIn predicate on the "object_key" field.
func ObjectKeyNotIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldObjectKey, vs...))
}

// ObjectKeyGT applies the GT predicate on the "object_key" field.
func ObjectKeyGT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldObjectKey, v))
}

// ObjectKeyGTE applies the GTE predicate on the "object_key" field.
func ObjectKeyGTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldObjectKey, v))
}

// ObjectKeyLT applies the LT predicate on the "object_key" field.
func ObjectKeyLT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldObjectKey, v))
}

// ObjectKeyLTE applies the LTE predicate on the "object_key" field.
func ObjectKeyLTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldObjectKey, v))
}

// ObjectKeyContains applies the Contains predicate on the "object_key" field.
func ObjectKeyContains(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContains(FieldObjectKey, v))
}

// ObjectKeyHasPrefix applies the HasPrefix predicate on the "object_key" field.
func ObjectKeyHasPrefix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasPrefix(FieldObjectKey, v))
}

// ObjectKeyHasSuffix applies the HasSuffix predicate on the "object_key" field.
func ObjectKeyHasSuffix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasSuffix(FieldObjectKey, v))
}

// ObjectKeyEqualFold applies the EqualFold predicate on the "object_key" field.
func ObjectKeyEqualFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEqualFold(FieldObjectKey, v))
}

// ObjectKeyContainsFold applies the ContainsFold predicate on the "object_key" field.
func ObjectKeyContainsFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContainsFold(FieldObjectKey, v))
}

// OriginalFileNameEQ applies the EQ predicate on the "original_file_name" field.
func OriginalFileNameEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldOriginalFileName, v))
}

// OriginalFileNameNEQ applies the NEQ predicate on the "original_file_name" field.
func OriginalFileNameNEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldOriginalFileName, v))
}

// OriginalFileNameIn applies the In predicate on the "original_file_name" field.
func OriginalFileNameIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldOriginalFileName, vs...))
}

// OriginalFileNameNotIn applies the NotIn predicate on the "original_file_name" field.
func OriginalFileNameNotIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldOriginalFileName, vs...))
}

// OriginalFileNameGT applies the GT predicate on the "original_file_name" field.
func OriginalFileNameGT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldOriginalFileName, v))
}

// OriginalFileNameGTE applies the GTE predicate on the "original_file_name" field.
func OriginalFileNameGTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldOriginalFileName, v))
}

// OriginalFileNameLT applies the LT predicate on the "original_file_name" field.
func OriginalFileNameLT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldOriginalFileName, v))
}

// OriginalFileNameLTE applies the LTE predicate on the "original_file_name" field.
func OriginalFileNameLTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldOriginalFileName, v))
}

// OriginalFileNameContains applies the Contains predicate on the "original_file_name" field.
func OriginalFileNameContains(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContains(FieldOriginalFileName, v))
}

// OriginalFileNameHasPrefix applies the HasPrefix predicate on the "original_file_name" field.
func OriginalFileNameHasPrefix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasPrefix(FieldOriginalFileName, v))
}

// OriginalFileNameHasSuffix applies the HasSuffix predicate on the "original_file_name" field.
func OriginalFileNameHasSuffix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasSuffix(FieldOriginalFileName, v))
}

// OriginalFileNameIsNil applies the IsNil predicate on the "original_file_name" field.
func OriginalFileNameIsNil() predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIsNull(FieldOriginalFileName))
}

// OriginalFileNameNotNil applies the NotNil predicate on the "original_file_name" field.
func OriginalFileNameNotNil() predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotNull(FieldOriginalFileName))
}

// OriginalFileNameEqualFold applies the EqualFold predicate on the "original_file_name" field.
func OriginalFileNameEqualFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEqualFold(FieldOriginalFileName, v))
}

// OriginalFileNameContainsFold applies the ContainsFold predicate on the "original_file_name" field.
func OriginalFileNameContainsFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContainsFold(FieldOriginalFileName, v))
}

// FileSizeEQ applies the EQ predicate on the "file_size" field.
func FileSizeEQ(v int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldFileSize, v))
}

// FileSizeNEQ applies the NEQ predicate on the "file_size" field.
func FileSizeNEQ(v int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldFileSize, v))
}

// FileSizeIn applies the In predicate on the "file_size" field.
func FileSizeIn(vs ...int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldFileSize, vs...))
}

// FileSizeNotIn applies the NotIn predicate on the "file_size" field.
func FileSizeNotIn(vs ...int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldFileSize, vs...))
}

// FileSizeGT applies the GT predicate on the "file_size" field.
func FileSizeGT(v int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldFileSize, v))
}

// FileSizeGTE applies the GTE predicate on the "file_size" field.
func FileSizeGTE(v int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldFileSize, v))
}

// FileSizeLT applies the LT predicate on the "file_size" field.
func FileSizeLT(v int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldFileSize, v))
}

// FileSizeLTE applies the LTE predicate on the "file_size" field.
func FileSizeLTE(v int64) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldFileSize, v))
}

// FileSizeIsNil applies the IsNil predicate on the "file_size" field.
func FileSizeIsNil() predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIsNull(FieldFileSize))
}

// FileSizeNotNil applies the NotNil predicate on the "file_size" field.
func FileSizeNotNil() predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotNull(FieldFileSize))
}

// ContentTypeEQ applies the EQ predicate on the "content_type" field.
func ContentTypeEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldContentType, v))
}

// ContentTypeNEQ applies the NEQ predicate on the "content_type" field.
func ContentTypeNEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldContentType, v))
}

// ContentTypeIn applies the In predicate on the "content_type" field.
func ContentTypeIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldContentType, vs...))
}

// ContentTypeNotIn applies the NotIn predicate on the "content_type" field.
func ContentTypeNotIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldContentType, vs...))
}

// ContentTypeGT applies the GT predicate on the "content_type" field.
func ContentTypeGT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldContentType, v))
}

// ContentTypeGTE applies the GTE predicate on the "content_type" field.
func ContentTypeGTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldContentType, v))
}

// ContentTypeLT applies the LT predicate on the "content_type" field.
func ContentTypeLT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldContentType, v))
}

// ContentTypeLTE applies the LTE predicate on the "content_type" field.
func ContentTypeLTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldContentType, v))
}

// ContentTypeContains applies the Contains predicate on the "content_type" field.
func ContentTypeContains(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContains(FieldContentType, v))
}

// ContentTypeHasPrefix applies the HasPrefix predicate on the "content_type" field.
func ContentTypeHasPrefix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasPrefix(FieldContentType, v))
}

// ContentTypeHasSuffix applies the HasSuffix predicate on the "content_type" field.
func ContentTypeHasSuffix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasSuffix(FieldContentType, v))
}

// ContentTypeIsNil applies the IsNil predicate on the "content_type" field.
func ContentTypeIsNil() predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIsNull(FieldContentType))
}

// ContentTypeNotNil applies the NotNil predicate on the "content_type" field.
func ContentTypeNotNil() predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotNull(FieldContentType))
}

// ContentTypeEqualFold applies the EqualFold predicate on the "content_type" field.
func ContentTypeEqualFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEqualFold(FieldContentType, v))
}

// ContentTypeContainsFold applies the ContainsFold predicate on the "content_type" field.
func ContentTypeContainsFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContainsFold(FieldContentType, v))
}

// FileHashEQ applies the EQ predicate on the "file_hash" field.
func FileHashEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEQ(FieldFileHash, v))
}

// FileHashNEQ applies the NEQ predicate on the "file_hash" field.
func FileHashNEQ(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNEQ(FieldFileHash, v))
}

// FileHashIn applies the In predicate on the "file_hash" field.
func FileHashIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIn(FieldFileHash, vs...))
}

// FileHashNotIn applies the NotIn predicate on the "file_hash" field.
func FileHashNotIn(vs ...string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotIn(FieldFileHash, vs...))
}

// FileHashGT applies the GT predicate on the "file_hash" field.
func FileHashGT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGT(FieldFileHash, v))
}

// FileHashGTE applies the GTE predicate on the "file_hash" field.
func FileHashGTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldGTE(FieldFileHash, v))
}

// FileHashLT applies the LT predicate on the "file_hash" field.
func FileHashLT(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLT(FieldFileHash, v))
}

// FileHashLTE applies the LTE predicate on the "file_hash" field.
func FileHashLTE(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldLTE(FieldFileHash, v))
}

// FileHashContains applies the Contains predicate on the "file_hash" field.
func FileHashContains(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContains(FieldFileHash, v))
}

// FileHashHasPrefix applies the HasPrefix predicate on the "file_hash" field.
func FileHashHasPrefix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasPrefix(FieldFileHash, v))
}

// FileHashHasSuffix applies the HasSuffix predicate on the "file_hash" field.
func FileHashHasSuffix(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldHasSuffix(FieldFileHash, v))
}

// FileHashIsNil applies the IsNil predicate on the "file_hash" field.
func FileHashIsNil() predicate.FileStorage {
	return predicate.FileStorage(sql.FieldIsNull(FieldFileHash))
}

// FileHashNotNil applies the NotNil predicate on the "file_hash" field.
func FileHashNotNil() predicate.FileStorage {
	return predicate.FileStorage(sql.FieldNotNull(FieldFileHash))
}

// FileHashEqualFold applies the EqualFold predicate on the "file_hash" field.
func FileHashEqualFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldEqualFold(FieldFileHash, v))
}

// FileHashContainsFold applies the ContainsFold predicate on the "file_hash" field.
func FileHashContainsFold(v string) predicate.FileStorage {
	return predicate.FileStorage(sql.FieldContainsFold(FieldFileHash, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FileStorage) predicate.FileStorage {
	return predicate.FileStorage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FileStorage) predicate.FileStorage {
	return predicate.FileStorage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FileStorage) predicate.FileStorage {
	return predicate.FileStorage(sql.NotPredicates(p))
}
