// Code generated by ent, DO NOT EDIT.

package filestorage

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the filestorage type in the database.
	Label = "file_storage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldBucketName holds the string denoting the bucket_name field in the database.
	FieldBucketName = "bucket_name"
	// FieldObjectKey holds the string denoting the object_key field in the database.
	FieldObjectKey = "object_key"
	// FieldOriginalFileName holds the string denoting the original_file_name field in the database.
	FieldOriginalFileName = "original_file_name"
	// FieldFileSize holds the string denoting the file_size field in the database.
	FieldFileSize = "file_size"
	// FieldContentType holds the string denoting the content_type field in the database.
	FieldContentType = "content_type"
	// FieldFileHash holds the string denoting the file_hash field in the database.
	FieldFileHash = "file_hash"
	// Table holds the table name of the filestorage in the database.
	Table = "file_storages"
)

// Columns holds all SQL columns for filestorage fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldBucketName,
	FieldObjectKey,
	FieldOriginalFileName,
	FieldFileSize,
	FieldContentType,
	FieldFileHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// BucketNameValidator is a validator for the "bucket_name" field. It is called by the builders before save.
	BucketNameValidator func(string) error
	// ObjectKeyValidator is a validator for the "object_key" field. It is called by the builders before save.
	ObjectKeyValidator func(string) error
)

// OrderOption defines the ordering options for the FileStorage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBucketName orders the results by the bucket_name field.
func ByBucketName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBucketName, opts...).ToFunc()
}

// ByObjectKey orders the results by the object_key field.
func ByObjectKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObjectKey, opts...).ToFunc()
}

// ByOriginalFileName orders the results by the original_file_name field.
func ByOriginalFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOriginalFileName, opts...).ToFunc()
}

// ByFileSize orders the results by the file_size field.
func ByFileSize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileSize, opts...).ToFunc()
}

// ByContentType orders the results by the content_type field.
func ByContentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContentType, opts...).ToFunc()
}

// ByFileHash orders the results by the file_hash field.
func ByFileHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileHash, opts...).ToFunc()
}
