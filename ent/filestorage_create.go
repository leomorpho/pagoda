// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/mikestefanello/pagoda/ent/filestorage"
)

// FileStorageCreate is the builder for creating a FileStorage entity.
type FileStorageCreate struct {
	config
	mutation *FileStorageMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (fsc *FileStorageCreate) SetCreatedAt(t time.Time) *FileStorageCreate {
	fsc.mutation.SetCreatedAt(t)
	return fsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fsc *FileStorageCreate) SetNillableCreatedAt(t *time.Time) *FileStorageCreate {
	if t != nil {
		fsc.SetCreatedAt(*t)
	}
	return fsc
}

// SetUpdatedAt sets the "updated_at" field.
func (fsc *FileStorageCreate) SetUpdatedAt(t time.Time) *FileStorageCreate {
	fsc.mutation.SetUpdatedAt(t)
	return fsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fsc *FileStorageCreate) SetNillableUpdatedAt(t *time.Time) *FileStorageCreate {
	if t != nil {
		fsc.SetUpdatedAt(*t)
	}
	return fsc
}

// SetBucketName sets the "bucket_name" field.
func (fsc *FileStorageCreate) SetBucketName(s string) *FileStorageCreate {
	fsc.mutation.SetBucketName(s)
	return fsc
}

// SetObjectKey sets the "object_key" field.
func (fsc *FileStorageCreate) SetObjectKey(s string) *FileStorageCreate {
	fsc.mutation.SetObjectKey(s)
	return fsc
}

// SetOriginalFileName sets the "original_file_name" field.
func (fsc *FileStorageCreate) SetOriginalFileName(s string) *FileStorageCreate {
	fsc.mutation.SetOriginalFileName(s)
	return fsc
}

// SetNillableOriginalFileName sets the "original_file_name" field if the given value is not nil.
func (fsc *FileStorageCreate) SetNillableOriginalFileName(s *string) *FileStorageCreate {
	if s != nil {
		fsc.SetOriginalFileName(*s)
	}
	return fsc
}

// SetFileSize sets the "file_size" field.
func (fsc *FileStorageCreate) SetFileSize(i int64) *FileStorageCreate {
	fsc.mutation.SetFileSize(i)
	return fsc
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (fsc *FileStorageCreate) SetNillableFileSize(i *int64) *FileStorageCreate {
	if i != nil {
		fsc.SetFileSize(*i)
	}
	return fsc
}

// SetContentType sets the "content_type" field.
func (fsc *FileStorageCreate) SetContentType(s string) *FileStorageCreate {
	fsc.mutation.SetContentType(s)
	return fsc
}

// SetNillableContentType sets the "content_type" field if the given value is not nil.
func (fsc *FileStorageCreate) SetNillableContentType(s *string) *FileStorageCreate {
	if s != nil {
		fsc.SetContentType(*s)
	}
	return fsc
}

// SetFileHash sets the "file_hash" field.
func (fsc *FileStorageCreate) SetFileHash(s string) *FileStorageCreate {
	fsc.mutation.SetFileHash(s)
	return fsc
}

// SetNillableFileHash sets the "file_hash" field if the given value is not nil.
func (fsc *FileStorageCreate) SetNillableFileHash(s *string) *FileStorageCreate {
	if s != nil {
		fsc.SetFileHash(*s)
	}
	return fsc
}

// Mutation returns the FileStorageMutation object of the builder.
func (fsc *FileStorageCreate) Mutation() *FileStorageMutation {
	return fsc.mutation
}

// Save creates the FileStorage in the database.
func (fsc *FileStorageCreate) Save(ctx context.Context) (*FileStorage, error) {
	fsc.defaults()
	return withHooks(ctx, fsc.sqlSave, fsc.mutation, fsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fsc *FileStorageCreate) SaveX(ctx context.Context) *FileStorage {
	v, err := fsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsc *FileStorageCreate) Exec(ctx context.Context) error {
	_, err := fsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsc *FileStorageCreate) ExecX(ctx context.Context) {
	if err := fsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fsc *FileStorageCreate) defaults() {
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		v := filestorage.DefaultCreatedAt()
		fsc.mutation.SetCreatedAt(v)
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		v := filestorage.DefaultUpdatedAt()
		fsc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsc *FileStorageCreate) check() error {
	if _, ok := fsc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "FileStorage.created_at"`)}
	}
	if _, ok := fsc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "FileStorage.updated_at"`)}
	}
	if _, ok := fsc.mutation.BucketName(); !ok {
		return &ValidationError{Name: "bucket_name", err: errors.New(`ent: missing required field "FileStorage.bucket_name"`)}
	}
	if v, ok := fsc.mutation.BucketName(); ok {
		if err := filestorage.BucketNameValidator(v); err != nil {
			return &ValidationError{Name: "bucket_name", err: fmt.Errorf(`ent: validator failed for field "FileStorage.bucket_name": %w`, err)}
		}
	}
	if _, ok := fsc.mutation.ObjectKey(); !ok {
		return &ValidationError{Name: "object_key", err: errors.New(`ent: missing required field "FileStorage.object_key"`)}
	}
	if v, ok := fsc.mutation.ObjectKey(); ok {
		if err := filestorage.ObjectKeyValidator(v); err != nil {
			return &ValidationError{Name: "object_key", err: fmt.Errorf(`ent: validator failed for field "FileStorage.object_key": %w`, err)}
		}
	}
	return nil
}

func (fsc *FileStorageCreate) sqlSave(ctx context.Context) (*FileStorage, error) {
	if err := fsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fsc.mutation.id = &_node.ID
	fsc.mutation.done = true
	return _node, nil
}

func (fsc *FileStorageCreate) createSpec() (*FileStorage, *sqlgraph.CreateSpec) {
	var (
		_node = &FileStorage{config: fsc.config}
		_spec = sqlgraph.NewCreateSpec(filestorage.Table, sqlgraph.NewFieldSpec(filestorage.FieldID, field.TypeInt))
	)
	if value, ok := fsc.mutation.CreatedAt(); ok {
		_spec.SetField(filestorage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fsc.mutation.UpdatedAt(); ok {
		_spec.SetField(filestorage.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fsc.mutation.BucketName(); ok {
		_spec.SetField(filestorage.FieldBucketName, field.TypeString, value)
		_node.BucketName = value
	}
	if value, ok := fsc.mutation.ObjectKey(); ok {
		_spec.SetField(filestorage.FieldObjectKey, field.TypeString, value)
		_node.ObjectKey = value
	}
	if value, ok := fsc.mutation.OriginalFileName(); ok {
		_spec.SetField(filestorage.FieldOriginalFileName, field.TypeString, value)
		_node.OriginalFileName = value
	}
	if value, ok := fsc.mutation.FileSize(); ok {
		_spec.SetField(filestorage.FieldFileSize, field.TypeInt64, value)
		_node.FileSize = value
	}
	if value, ok := fsc.mutation.ContentType(); ok {
		_spec.SetField(filestorage.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	if value, ok := fsc.mutation.FileHash(); ok {
		_spec.SetField(filestorage.FieldFileHash, field.TypeString, value)
		_node.FileHash = value
	}
	return _node, _spec
}

// FileStorageCreateBulk is the builder for creating many FileStorage entities in bulk.
type FileStorageCreateBulk struct {
	config
	err      error
	builders []*FileStorageCreate
}

// Save creates the FileStorage entities in the database.
func (fscb *FileStorageCreateBulk) Save(ctx context.Context) ([]*FileStorage, error) {
	if fscb.err != nil {
		return nil, fscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fscb.builders))
	nodes := make([]*FileStorage, len(fscb.builders))
	mutators := make([]Mutator, len(fscb.builders))
	for i := range fscb.builders {
		func(i int, root context.Context) {
			builder := fscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileStorageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fscb *FileStorageCreateBulk) SaveX(ctx context.Context) []*FileStorage {
	v, err := fscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fscb *FileStorageCreateBulk) Exec(ctx context.Context) error {
	_, err := fscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fscb *FileStorageCreateBulk) ExecX(ctx context.Context) {
	if err := fscb.Exec(ctx); err != nil {
		panic(err)
	}
}
