package pages

import (
	"fmt"

	"github.com/mikestefanello/pagoda/pkg/controller"
	"github.com/mikestefanello/pagoda/pkg/types"
	"github.com/mikestefanello/pagoda/templates/helpers"
)

templ Home(page *controller.Page) {
	if page.HTMX.Request.Target != "posts" {
		@homeTopContent(page)
	}
	@homePosts(page)
	if page.HTMX.Request.Target != "posts" {
		@homeFileMsg()
	}
}

templ homeTopContent(page *controller.Page) {
	<div class="bg-blue-500 text-white py-6">
		<div class="container mx-auto px-4">
			<h1 class="text-3xl font-semibold">
				Hello
				if page.IsAuth {
					fmt.Sprintf(", %s", page.AuthUser.Name)
				}
			</h1>
			<h2 class="text-xl mt-2">
				if page.IsAuth {
					"Welcome back!"
				} else {
					"Please login to your account."
				}
			</h2>
		</div>
	</div>
	<div class="mt-6 mb-4">
		<h1 class="text-2xl font-bold text-center">Recent posts</h1>
		<h2 class="text-lg text-gray-600 text-center mt-2">
			Below is an example of both paging and AJAX fetching using HTMX
		</h2>
	</div>
}

templ homePosts(page *controller.Page) {
	<div id="posts" class="container mx-auto px-4">
		if data, ok := page.Data.([]types.Post); ok {
			for _, post := range data {
				<div class="flex border-b border-gray-200 py-4">
					<div class="w-16 h-16 flex-none rounded-full overflow-hidden">
						<img src={ helpers.File("gopher.png") } alt="Gopher" class="object-cover w-full h-full"/>
					</div>
					<div class="flex-grow ml-4">
						<p class="font-bold">{ post.Title }</p>
						<p>{ post.Body }</p>
					</div>
				</div>
			}
		}
		<div class="flex justify-center mt-4" hx-select="#posts" hx-target="#posts">
			if !page.Pager.IsBeginning() {
				<button
					class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2"
					hx-swap="outerHTML"
					hx-get={ fmt.Sprintf("/?page=%d", page.Pager.Page-1) }
				>Previous page</button>
			}
			if !page.Pager.IsEnd() {
				<button
					class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded"
					hx-swap="outerHTML"
					hx-get={ fmt.Sprintf("/?page=%d", page.Pager.Page+1) }
				>Next page</button>
			}
		</div>
	</div>
}

templ homeFileMsg() {
	<div class="mt-8 mx-auto px-4 max-w-4xl">
		<div
			class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4"
			x-data="{ show: true }"
			x-show="show"
		>
			<p class="font-bold">Serving files</p>
			<p>
				In the example posts above, check how the file URL contains a cache-buster query parameter which changes only when the app is restarted. Static files also contain cache-control headers which are configured via middleware. You can also use AlpineJS to dismiss this message.
			</p>
			<div class="mt-4">
				<button
					class="text-sm bg-yellow-500 text-white py-1 px-3 rounded hover:bg-yellow-600"
					@click="show = false"
				>Dismiss</button>
			</div>
		</div>
	</div>
}
