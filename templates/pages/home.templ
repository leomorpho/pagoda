package pages

import (
    "fmt"

    "github.com/mikestefanello/pagoda/pkg/controller"
    "github.com/mikestefanello/pagoda/pkg/types"
    "github.com/mikestefanello/pagoda/templates/helpers"
)

templ Home(page *controller.Page) {
    if page.HTMX.Request.Target != "posts" {
        @homeTopContent(page)
    }

    @homePosts(page)

    if page.HTMX.Request.Target != "posts" {
        @homeFileMsg()
    }
}

templ homeTopContent(page *controller.Page) {
    <section class="hero is-info welcome is-small">
        <div class="hero-body">
            <div class="container">
                <h1 class="title">
                    Hello
                    if page.IsAuth {
                        fmt.Sprintf(", %s", page.AuthUser.Name)
                    }
                </h1>
                <h2 class="subtitle">
                    if page.IsAuth {
                        { "Welcome back!" }
                    } else {
                        { "Please login in to your account." }
                    }
                </h2>
            </div>
        </div>
    </section>

    <section class="section">
        <h1 class="title">Recent posts</h1>
        <h2 class="subtitle">
            Below is an example of both paging and AJAX fetching using HTMX
        </h2>
    </section>
}

templ homePosts(page *controller.Page) {
    <div id="posts">
    if data, ok := page.Data.([]types.Post); ok {
        for _, post := range data {
            <article class="media">
                <figure class="media-left">
                    <p class="image is-64x64">
                        <img src={ helpers.File("gopher.png") } alt="Gopher"/>
                    </p>
                </figure>
                <div class="media-content">
                    <div class="content">
                        <p>
                            <strong>{post.Title}</strong>
                            <br/>
                            { post.Body }
                        </p>
                    </div>
                </div>
            </article>
        }
    }

        <div class="field is-grouped is-grouped-centered">
            if !page.Pager.IsBeginning() {
                <p class="control">
                    <button class="button is-primary" hx-swap="outerHTML" hx-get={ fmt.Sprintf("/?page=%d", page.Pager.Page - 1) } hx-target="#posts">Previous page</button>
                </p>
            }
            if !page.Pager.IsEnd() {
                <p class="control">
                    <button class="button is-primary" hx-swap="outerHTML" hx-get={ fmt.Sprintf("/?page=%d", page.Pager.Page + 1) } hx-target="#posts">Next page</button>
                </p>
            }
        </div>
    </div>
}

templ homeFileMsg() {
    <div class="block"></div>
    <article class="message is-small is-warning" x-data="{show: true}" x-show="show">
        <div class="message-header">
            <p>Serving files</p>
            <button class="delete is-small" aria-label="delete" @click="show = false"></button>
        </div>
        <div class="message-body">
            In the example posts above, check how the file URL contains a cache-buster query parameter which changes only when the app is restarted.
            Static files also contain cache-control headers which are configured via middleware.
            You can also use AlpineJS to dismiss this message.
        </div>
    </article>
}
