package pages

import (
    "fmt"

    "github.com/mikestefanello/pagoda/pkg/controller"
    "github.com/mikestefanello/pagoda/pkg/types"
    "github.com/mikestefanello/pagoda/templates/helpers"
)

templ About(page *controller.Page) {
    if data, ok := page.Data.(types.AboutData); ok {
        if len(data.FrontendTabs) > 0 {
            <p class="subtitle mt-5">Frontend</p>
            <p class="mb-4">The following incredible projects make developing advanced, modern frontends possible and simple without having to write a single line of JS or CSS. You can go extremely far without leaving the comfort of Go with server-side rendered HTML.</p>
            @aboutTabs(data.FrontendTabs)
            <div class="mb-4"></div>
        }

        if len(data.BackendTabs) > 0 {
            <p class="subtitle mt-5">Backend</p>
            <p class="mb-4">The following incredible projects provide the foundation of the Go backend. See the repository for a complete list of included projects.</p>
            @aboutTabs(data.BackendTabs)
            <div class="mb-4"></div>
        }

        if data.ShowCacheWarning {
            <article class="message is-warning mt-6">
                <div class="message-header">
                    <p>Warning</p>
                </div>
                <div class="message-body">
                    This route has caching enabled so hot-reloading in the local environment will not work. Check the Redis cache for a key matching the URL path.
                </div>
            </article>
        }
    }
}

templ aboutTabs(tabs []types.AboutTab) {
    <div x-data="{tab: 0}">
        <div class="tabs">
            <ul>
                for index, tab := range tabs {
                    <li :class={ fmt.Sprintf("{'is-active': tab === %d}", index) } @click={ fmt.Sprintf("tab = %d", index) }><a>{ tab.Title }</a></li>
                }
            </ul>
        </div>
        for index, tab := range tabs {
            <div x-show={ fmt.Sprintf("tab == %d", index) }><p> &rarr;&nbsp;
            @helpers.UnsafeHTML(tab.Body)
            </p></div>
        }
    </div>
}
