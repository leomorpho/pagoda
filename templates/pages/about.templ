package pages

import (
	// "strconv"
	"fmt"
	"github.com/mikestefanello/pagoda/pkg/controller"
	"github.com/mikestefanello/pagoda/pkg/types"
	"github.com/mikestefanello/pagoda/templates/helpers"
)

templ About(page *controller.Page) {
	if data, ok := page.Data.(types.AboutData); ok {
		if len(data.FrontendTabs) > 0 {
			<p class="text-xl mt-5">Frontend</p>
			<p class="mb-4">The following incredible projects make developing advanced, modern frontends possible and simple without having to write a single line of JS or CSS. You can go extremely far without leaving the comfort of Go with server-side rendered HTML.</p>
			@aboutTabs(data.FrontendTabs)
			<div class="mb-4"></div>
		}
		if len(data.BackendTabs) > 0 {
			<p class="text-xl mt-5">Backend</p>
			<p class="mb-4">The following incredible projects provide the foundation of the Go backend. See the repository for a complete list of included projects.</p>
			@aboutTabs(data.BackendTabs)
			<div class="mb-4"></div>
		}
		if data.ShowCacheWarning {
			<div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mt-6">
				<p class="font-bold">Warning</p>
				<p>This route has caching enabled so hot-reloading in the local environment will not work. Check the Redis cache for a key matching the URL path.</p>
			</div>
		}
	}
}

// templ aboutTabs(tabs []types.AboutTab) {
// 	<div x-data="{tab: 0}">
// 		<div class="tabs">
// 			<ul>
// 				for index, tab := range tabs {
// 					<li :class={ fmt.Sprintf("{'is-active': tab === %d}", index) } @click={ fmt.Sprintf("tab = %d", index) }><a>{ tab.Title }</a></li>
// 				}
// 			</ul>
// 		</div>
// 		for index, tab := range tabs {
// 			<div x-show={ fmt.Sprintf("tab == %d", index) }>
// 				<p>
// 					&rarr;&nbsp;
// 					@helpers.UnsafeHTML(tab.Body)
// 				</p>
// 			</div>
// 		}
// 	</div>
// }
templ aboutTabs(tabs []types.AboutTab) {
	<div x-data="{ currentTab: 1 }">
		<ul class="flex flex-wrap -mb-px text-sm font-medium text-center">
			for index, tab := range tabs {
				<li class="me-2" @click={ fmt.Sprintf("currentTab = %d", index) }>
					<button
						:class={ fmt.Sprintf("{ 'border-b-2 text-blue-600': currentTab === %d, 'hover:text-gray-600 hover:border-gray-300': currentTab !== %d }", index, index) }
						class="inline-block p-4 rounded-t-lg"
						href="#"
					>{ tab.Title }</button>
				</li>
			}
		</ul>
		<div>
			for index, tab := range tabs {
				<div
					class="p-4 rounded-lg bg-gray-50 dark:bg-gray-800"
					x-show={ fmt.Sprintf("currentTab === %d", index) }
				>
					@helpers.UnsafeHTML(tab.Body)
				</div>
			}
		</div>
	</div>
}
