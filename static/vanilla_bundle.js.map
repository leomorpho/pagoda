{
  "version": 3,
  "sources": ["../javascript/vanilla/test_quiz.js", "../javascript/vanilla/main.js"],
  "sourcesContent": ["// Initializes the Quiz\nexport function initializeQuiz(container) {\n  // Quiz data\n  const questions = [\n    {\n      question: \"What is the capital of France?\",\n      options: [\"Paris\", \"London\", \"Berlin\", \"Madrid\"],\n      answer: \"Paris\",\n    },\n    {\n      question: \"What is 2 + 2?\",\n      options: [\"3\", \"4\", \"5\", \"6\"],\n      answer: \"4\",\n    },\n  ];\n\n  // Find quiz container\n  const quizContainer = container.querySelector(\"#js-quiz-container\");\n  if (!quizContainer) return;\n\n  // Mark the quiz as initialized to prevent duplicate initialization\n  quizContainer.setAttribute(\"data-initialized\", \"true\");\n\n  // Clear existing content (if any) to ensure idempotency\n  quizContainer.innerHTML = \"\";\n\n  // Apply container styling\n  quizContainer.className =\n    \"max-w-xl mx-auto bg-white shadow-md rounded-lg p-8 mt-5\";\n\n  // Render questions\n  questions.forEach((q, index) => {\n    const questionEl = document.createElement(\"div\");\n    questionEl.className = \"mb-4 last:mb-0\";\n\n    const questionText = document.createElement(\"p\");\n    questionText.textContent = `${index + 1}. ${q.question}`;\n    questionText.className = \"font-semibold text-lg mb-2\";\n    questionEl.appendChild(questionText);\n\n    const optionsContainer = document.createElement(\"div\");\n    optionsContainer.className = \"pl-4\";\n\n    q.options.forEach((option) => {\n      const optionContainer = document.createElement(\"div\");\n      optionContainer.className = \"flex items-center mb-1\";\n\n      const radioButton = document.createElement(\"input\");\n      radioButton.type = \"radio\";\n      radioButton.name = `question${index}`;\n      radioButton.value = option;\n      radioButton.className = \"option-input mr-2\";\n\n      const label = document.createElement(\"label\");\n      label.appendChild(document.createTextNode(option));\n      label.className = \"select-none\";\n\n      optionContainer.appendChild(radioButton);\n      optionContainer.appendChild(label);\n      optionsContainer.appendChild(optionContainer);\n    });\n\n    questionEl.appendChild(optionsContainer);\n    quizContainer.appendChild(questionEl);\n  });\n\n  // Submit button\n  const submitBtn = document.createElement(\"button\");\n  submitBtn.textContent = \"Submit Answers\";\n  submitBtn.className =\n    \"mt-4 px-4 py-2 bg-blue-500 hover:bg-blue-700 text-white font-bold rounded cursor-pointer\";\n  submitBtn.addEventListener(\n    \"click\",\n    submitQuiz.bind(null, questions, container)\n  );\n\n  quizContainer.appendChild(submitBtn);\n}\n\nfunction submitQuiz(questions, container) {\n  let score = 0;\n  questions.forEach((q, index) => {\n    const selectedOption = container.querySelector(\n      `input[name=\"question${index}\"]:checked`\n    );\n    if (selectedOption && selectedOption.value === q.answer) {\n      score++;\n    }\n  });\n  alert(`You scored ${score}/${questions.length}`);\n}\n", "import { initializeQuiz } from \"./test_quiz\";\n\nwindow.initializeJS = function initializeApp(targetElement) {\n  console.log(\"initialize js\");\n  // Control zoom based on screen size\n  controlZoom();\n\n  window.darkModeSwitchersInitialized =\n    window.darkModeSwitchersInitialized || false;\n  initializeDarkModeSwitchers();\n\n  const container = targetElement || document;\n\n  // Check if the quiz container exists before trying to access its attributes\n  const quizContainer = container.querySelector(\"#js-quiz-container\");\n  if (quizContainer && !quizContainer.hasAttribute(\"data-initialized\")) {\n    initializeQuiz(container);\n  }\n};\n\n// controlZoom prevents zooming on mobile devices to improve user experience. Note that it is\n// not enforced by all browsers, so is not guaranteed to work on all of them. TODO: we may want to\n// remove that entirely as Brave/Chrome ignore these directives, and it may be globally useless if\n// all browsers ignore it.\nfunction controlZoom() {\n  const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n\n  function updateViewport() {\n    if (window.innerWidth < 1024) {\n      // Disable zooming on small screens\n      viewportMeta.setAttribute(\n        \"content\",\n        \"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\"\n      );\n    } else {\n      // Allow zooming on large screens\n      viewportMeta.setAttribute(\n        \"content\",\n        \"width=device-width, initial-scale=1.0\"\n      );\n    }\n  }\n\n  // Update on initial load\n  updateViewport();\n\n  // Update on window resize\n  window.addEventListener(\"resize\", updateViewport);\n}\n\n// Code derived from flowbite to switch between dark and light modes: https://flowbite.com/docs/customize/dark-mode/\nexport function initializeDarkModeSwitchers() {\n  if (window.darkModeSwitchersInitialized) {\n    return;\n  }\n  const themeToggleBtns = document.querySelectorAll(\".theme-toggle\");\n  const themeToggleDarkIcons = document.querySelectorAll(\n    \".theme-toggle-dark-icon\"\n  );\n  const themeToggleLightIcons = document.querySelectorAll(\n    \".theme-toggle-light-icon\"\n  );\n\n  function updateIcons() {\n    themeToggleDarkIcons.forEach((icon) => {\n      if (\n        localStorage.getItem(\"color-theme\") === \"dark\" ||\n        (!localStorage.getItem(\"color-theme\") &&\n          window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n      ) {\n        icon.classList.add(\"hidden\");\n      } else {\n        icon.classList.remove(\"hidden\");\n      }\n    });\n    themeToggleLightIcons.forEach((icon) => {\n      if (\n        localStorage.getItem(\"color-theme\") === \"dark\" ||\n        (!localStorage.getItem(\"color-theme\") &&\n          window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n      ) {\n        icon.classList.remove(\"hidden\");\n      } else {\n        icon.classList.add(\"hidden\");\n      }\n    });\n  }\n\n  // Initial icon update based on the current theme\n  updateIcons();\n\n  themeToggleBtns.forEach((btn) => {\n    btn.addEventListener(\"click\", () => {\n      console.log(\"add event listener\");\n      // Toggle theme and update icons\n      if (\n        localStorage.getItem(\"color-theme\") === \"dark\" ||\n        (!localStorage.getItem(\"color-theme\") &&\n          window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n      ) {\n        document.documentElement.classList.remove(\"dark\");\n        localStorage.setItem(\"color-theme\", \"light\");\n      } else {\n        document.documentElement.classList.add(\"dark\");\n        localStorage.setItem(\"color-theme\", \"dark\");\n      }\n      updateIcons();\n    });\n  });\n\n  // Mark the dark mode switchers as initialized to prevent duplicate initializations\n  window.darkModeSwitchersInitialized = true;\n}\n"],
  "mappings": "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",
  "names": ["initializeQuiz", "container", "questions", "quizContainer", "q", "index", "questionEl", "questionText", "optionsContainer", "option", "optionContainer", "radioButton", "label", "submitBtn", "submitQuiz", "score", "selectedOption", "targetElement", "controlZoom", "initializeDarkModeSwitchers", "container", "quizContainer", "initializeQuiz", "viewportMeta", "updateViewport", "themeToggleBtns", "themeToggleDarkIcons", "themeToggleLightIcons", "updateIcons", "icon", "btn"]
}
